Steps For 3 tier environment.

1- Presentation Layer
2- Business Layer
3- Storage Layer

Note :- Using Terraform for building infrastruture



Points Kept in mind while designing-
1- High Availability
2- Scalibility
3- Fault Tolerance
4- Security
5- Cost optimization

Resources Used-
VPC
Route53
RDS
S3
ALB
EC2
Cloudfront

For Networking layer -
Setting up a VPC with public and private subnets for multiple Availability Zones

Create VPC through Terraform
Create VPC:
resource "aws_vpc" "vpc" {
cidr_block = "10.0.0.0/16"
enable_dns_support = true
enable_dns_hostnames = true
tags = {
Name = "new_VPC"
}
}

resource "aws_subnet" "public_subnet" {
vpc_id = "${aws_vpc.vpc.id}"
cidr_block = "10.0.0.0/24"
map_public_ip_on_launch = true
availability_zone = "ap-southeast-1a"
tags = {
Name = "tampublicsubnet"
}
}

resource "aws_subnet" "private_subnet" {
vpc_id = "${aws_vpc.vpc.id}"
cidr_block = "10.0.0.0/24"
map_public_ip_on_launch = true
availability_zone = "ap-southeast-1a"
tags = {
Name = "tampublicsubnet"
}
}
resource "aws_route_table" "public_route_table" {
vpc_id = "${aws_vpc.vpc.id}"
tags{
Name = "public_route"
}
}

resource "aws_route" "public_route" {
route_table_id = "${aws_route_table.public_route_table.id}"
destination_cidr_block = "0.0.0.0/0"
nat_gateway_id = "${aws_internet_gateway.gw.id}"
}

resource "aws_route_table_association" "public_subnet_association" {
subnet_id = "${aws_subnet.public_subnet.id}"
route_table_id = "${aws_route_table.public_route_table.id}"
}



For Presentation Layer - Considering content to be static website

We will be using S3 bucket as the origin behind a CloudFront distribution.
For minimized latency we use Amazonâ€™s CloudFront content distribution network.

Setting up Load Balancers for Web and Application servers
We will use Application Load Balancer

Provision EC2 instances within Auto Scaling groups
resource "aws_instance" "application" {
ami = "ami-0b419c3a4b01d1859"
instance_type = "t2.micro"
key_name = "master"
monitoring = true
vpc_security_group_ids = ["${aws_security_group.sg.id}"]
subnet_id = "${aws_subnet.public_subnet.id}"
associate_public_ip_address = true tags {
Name = "Application"
}

Setting up the Database tier
Database Tier, Relational Database Service (RDS) provides the relational (MySQL, MS SQL or Oracle) environment for this solution.
In this design, it is established as a multi-AZ deployment. The multi-AZ deployment includes a standby RDS instance  in the
second availability zone, which provides us with increased availability and durability for the database
service in synchronously replicating all data to the standby instance.

Optionally we can also provision read replicas to reduce the demand on the master database. To optimize costs, our
initial deployment may only include the master and slave RDS instances, with additional read replicas created
in each AZ as dictated by the demand.

Setup DNS service with AWS Route 53
We use the Route 53 domain name service for the registration and management of our Internet domain.
